#include <vector>
#include <math.h>
#include <string>
#include <fstream>
#include <sstream>
using namespace std;

struct Tree{
    int child_id_left, child_id_right, feature, n_samples;
    float threshold;
};

vector<vector<Tree>> iForest;
std::vector<Tree> iTree1;
std::vector<Tree> iTree2;
std::vector<Tree> iTree3;
std::vector<Tree> iTree4;
std::vector<Tree> iTree5;

std::vector<std::vector<std::string>> parsedCsv;

int i = 0;
void setup() 
{
    Serial.begin(9600);
    
    parsedCsv.push_back({"13.29", "1.97", "2.68", "16.8", "102.0", "3.0", "3.23", "0.31", "1.66", "6.0", "1.07", "2.84", "1270.0"});
    parsedCsv.push_back({"14.3", "1.92", "2.72", "20.0", "120.0", "2.8", "3.14", "0.33", "1.97", "6.2", "1.07", "2.65", "1280.0"});
    parsedCsv.push_back({"13.68", "1.83", "2.36", "17.2", "104.0", "2.42", "2.69", "0.42", "1.97", "3.84", "1.23", "2.87", "990.0"});
    parsedCsv.push_back({"14.06", "2.15", "2.61", "17.6", "121.0", "2.6", "2.51", "0.31", "1.25", "5.05", "1.06", "3.58", "1295.0"});
    parsedCsv.push_back({"14.22", "1.7", "2.3", "16.3", "118.0", "3.2", "3.0", "0.26", "2.03", "6.38", "0.94", "3.31", "970.0"});
    parsedCsv.push_back({"14.1", "2.02", "2.4", "18.8", "103.0", "2.75", "2.92", "0.32", "2.38", "6.2", "1.07", "2.75", "1060.0"});
    parsedCsv.push_back({"13.86", "1.35", "2.27", "16.0", "98.0", "2.98", "3.15", "0.22", "1.85", "7.22", "1.01", "3.55", "1045.0"});
    parsedCsv.push_back({"13.05", "1.65", "2.55", "18.0", "98.0", "2.45", "2.43", "0.29", "1.44", "4.25", "1.12", "2.51", "1105.0"});
    parsedCsv.push_back({"14.2", "1.76", "2.45", "15.2", "112.0", "3.27", "3.39", "0.34", "1.97", "6.75", "1.05", "2.85", "1450.0"});
    parsedCsv.push_back({"13.77", "1.9", "2.68", "17.1", "115.0", "3.0", "2.79", "0.39", "1.68", "6.3", "1.13", "2.93", "1375.0"});
    parsedCsv.push_back({"12.37", "0.94", "1.36", "10.6", "88.0", "1.98", "0.57", "0.28", "0.42", "1.95", "1.05", "1.82", "520.0"});
    parsedCsv.push_back({"12.33", "1.1", "2.28", "16.0", "101.0", "2.05", "1.09", "0.63", "0.41", "3.27", "1.25", "1.67", "680.0"});
    parsedCsv.push_back({"12.64", "1.36", "2.02", "16.8", "100.0", "2.02", "1.41", "0.53", "0.62", "5.75", "0.98", "1.59", "450.0"});
    parsedCsv.push_back({"13.67", "1.25", "1.92", "18.0", "94.0", "2.1", "1.79", "0.32", "0.73", "3.8", "1.23", "2.46", "630.0"});
    parsedCsv.push_back({"12.37", "1.13", "2.16", "19.0", "87.0", "3.5", "3.1", "0.19", "1.87", "4.45", "1.22", "2.87", "420.0"});
    parsedCsv.push_back({"12.17", "1.45", "2.53", "19.0", "104.0", "1.89", "1.75", "0.45", "1.03", "2.95", "1.45", "2.23", "355.0"});
    parsedCsv.push_back({"12.37", "1.21", "2.56", "18.1", "98.0", "2.42", "2.65", "0.37", "2.08", "4.6", "1.19", "2.3", "678.0"});
    parsedCsv.push_back({"13.11", "1.01", "1.7", "15.0", "78.0", "2.98", "3.18", "0.26", "2.28", "5.3", "1.12", "3.18", "502.0"});
    parsedCsv.push_back({"12.37", "1.17", "1.92", "19.6", "78.0", "2.11", "2.0", "0.27", "1.04", "4.68", "1.12", "3.48", "510.0"});
    parsedCsv.push_back({"13.34", "0.94", "2.36", "17.0", "110.0", "2.53", "1.3", "0.55", "0.42", "3.17", "1.02", "1.93", "750.0"});
    parsedCsv.push_back({"12.21", "1.19", "1.75", "16.8", "151.0", "1.85", "1.28", "0.14", "2.5", "2.85", "1.28", "3.07", "718.0"});
    parsedCsv.push_back({"12.29", "1.61", "2.21", "20.4", "103.0", "1.1", "1.02", "0.37", "1.46", "3.05", "0.906", "1.82", "870.0"});
    parsedCsv.push_back({"13.86", "1.51", "2.67", "25.0", "86.0", "2.95", "2.86", "0.21", "1.87", "3.38", "1.36", "3.16", "410.0"});
    parsedCsv.push_back({"13.49", "1.66", "2.24", "24.0", "87.0", "1.88", "1.84", "0.27", "1.03", "3.74", "0.98", "2.78", "472.0"});
    parsedCsv.push_back({"12.99", "1.67", "2.6", "30.0", "139.0", "3.3", "2.89", "0.21", "1.96", "3.35", "1.31", "3.5", "985.0"});
    parsedCsv.push_back({"11.96", "1.09", "2.3", "21.0", "101.0", "3.38", "2.14", "0.13", "1.65", "3.21", "0.99", "3.13", "886.0"});
    parsedCsv.push_back({"11.66", "1.88", "1.92", "16.0", "97.0", "1.61", "1.57", "0.34", "1.15", "3.8", "1.23", "2.14", "428.0"});
    parsedCsv.push_back({"13.03", "0.9", "1.71", "16.0", "86.0", "1.95", "2.03", "0.24", "1.46", "4.6", "1.19", "2.48", "392.0"});
    parsedCsv.push_back({"11.84", "2.89", "2.23", "18.0", "112.0", "1.72", "1.32", "0.43", "0.95", "2.65", "0.96", "2.52", "500.0"});
    parsedCsv.push_back({"12.33", "0.99", "1.95", "14.8", "136.0", "1.9", "1.85", "0.35", "2.76", "3.4", "1.06", "2.31", "750.0"});
    parsedCsv.push_back({"12.7", "3.87", "2.4", "23.0", "101.0", "2.83", "2.55", "0.43", "1.95", "2.57", "1.19", "3.13", "463.0"});
    parsedCsv.push_back({"12.0", "0.92", "2.0", "19.0", "86.0", "2.42", "2.26", "0.3", "1.43", "2.5", "1.38", "3.12", "278.0"});
    parsedCsv.push_back({"12.72", "1.81", "2.2", "18.8", "86.0", "2.2", "2.53", "0.26", "1.77", "3.9", "1.16", "3.14", "714.0"});
    parsedCsv.push_back({"12.08", "1.13", "2.51", "24.0", "78.0", "2.0", "1.58", "0.4", "1.4", "2.2", "1.31", "2.72", "630.0"});
    parsedCsv.push_back({"13.05", "3.86", "2.32", "22.5", "85.0", "1.65", "1.59", "0.61", "1.62", "4.8", "0.84", "2.01", "515.0"});
    parsedCsv.push_back({"11.84", "0.89", "2.58", "18.0", "94.0", "2.2", "2.21", "0.22", "2.35", "3.05", "0.79", "3.08", "520.0"});
    parsedCsv.push_back({"12.67", "0.98", "2.24", "18.0", "99.0", "2.2", "1.94", "0.3", "1.46", "2.62", "1.23", "3.16", "450.0"});
    parsedCsv.push_back({"12.16", "1.61", "2.31", "22.8", "90.0", "1.78", "1.69", "0.43", "1.56", "2.45", "1.33", "2.26", "495.0"});
    parsedCsv.push_back({"11.65", "1.67", "2.62", "26.0", "88.0", "1.92", "1.61", "0.4", "1.34", "2.6", "1.36", "3.21", "562.0"});
    parsedCsv.push_back({"11.64", "2.06", "2.46", "21.6", "84.0", "1.95", "1.69", "0.48", "1.35", "2.8", "1.0", "2.75", "680.0"});
    parsedCsv.push_back({"12.08", "1.33", "2.3", "23.6", "70.0", "2.2", "1.59", "0.42", "1.38", "1.74", "1.07", "3.21", "625.0"});
    parsedCsv.push_back({"12.08", "1.83", "2.32", "18.5", "81.0", "1.6", "1.5", "0.52", "1.64", "2.4", "1.08", "2.27", "480.0"});
    parsedCsv.push_back({"12.0", "1.51", "2.42", "22.0", "86.0", "1.45", "1.25", "0.5", "1.63", "3.6", "1.05", "2.65", "450.0"});
    parsedCsv.push_back({"12.69", "1.53", "2.26", "20.7", "80.0", "1.38", "1.46", "0.58", "1.62", "3.05", "0.96", "2.06", "495.0"});
    parsedCsv.push_back({"12.29", "2.83", "2.22", "18.0", "88.0", "2.45", "2.25", "0.25", "1.99", "2.15", "1.15", "3.3", "290.0"});
    parsedCsv.push_back({"11.62", "1.99", "2.28", "18.0", "98.0", "3.02", "2.26", "0.17", "1.35", "3.25", "1.16", "2.96", "345.0"});
    parsedCsv.push_back({"12.47", "1.52", "2.2", "19.0", "162.0", "2.5", "2.27", "0.32", "3.28", "2.6", "1.16", "2.63", "937.0"});
    parsedCsv.push_back({"11.81", "2.12", "2.74", "21.5", "134.0", "1.6", "0.99", "0.14", "1.56", "2.5", "0.95", "2.26", "625.0"});
    parsedCsv.push_back({"12.29", "1.41", "1.98", "16.0", "85.0", "2.55", "2.5", "0.29", "1.77", "2.9", "1.23", "2.74", "428.0"});
    parsedCsv.push_back({"12.37", "1.07", "2.1", "18.5", "88.0", "3.52", "3.75", "0.24", "1.95", "4.5", "1.04", "2.77", "660.0"});
    parsedCsv.push_back({"12.29", "3.17", "2.21", "18.0", "88.0", "2.85", "2.99", "0.45", "2.81", "2.3", "1.42", "2.83", "406.0"});
    parsedCsv.push_back({"12.08", "2.08", "1.7", "17.5", "97.0", "2.23", "2.17", "0.26", "1.4", "3.3", "1.27", "2.96", "710.0"});
    parsedCsv.push_back({"12.6", "1.34", "1.9", "18.5", "88.0", "1.45", "1.36", "0.29", "1.35", "2.45", "1.04", "2.77", "562.0"});
    parsedCsv.push_back({"12.34", "2.45", "2.46", "21.0", "98.0", "2.56", "2.11", "0.34", "1.31", "2.8", "0.8", "3.38", "438.0"});
    parsedCsv.push_back({"11.82", "1.72", "1.88", "19.5", "86.0", "2.5", "1.64", "0.37", "1.42", "2.06", "0.94", "2.44", "415.0"});
    parsedCsv.push_back({"12.51", "1.73", "1.98", "20.5", "85.0", "2.2", "1.92", "0.32", "1.48", "2.94", "1.04", "3.57", "672.0"});
    parsedCsv.push_back({"12.42", "2.55", "2.27", "22.0", "90.0", "1.68", "1.84", "0.66", "1.42", "2.7", "0.86", "3.3", "315.0"});
    parsedCsv.push_back({"12.25", "1.73", "2.12", "19.0", "80.0", "1.65", "2.03", "0.37", "1.63", "3.4", "1.0", "3.17", "510.0"});
    parsedCsv.push_back({"12.72", "1.75", "2.28", "22.5", "84.0", "1.38", "1.76", "0.48", "1.63", "3.3", "0.88", "2.42", "488.0"});
    parsedCsv.push_back({"12.22", "1.29", "1.94", "19.0", "92.0", "2.36", "2.04", "0.39", "2.08", "2.7", "0.86", "3.02", "312.0"});
    parsedCsv.push_back({"11.61", "1.35", "2.7", "20.0", "94.0", "2.74", "2.92", "0.29", "2.49", "2.65", "0.96", "3.26", "680.0"});
    parsedCsv.push_back({"11.46", "3.74", "1.82", "19.5", "107.0", "3.18", "2.58", "0.24", "3.58", "2.9", "0.75", "2.81", "562.0"});
    parsedCsv.push_back({"12.52", "2.43", "2.17", "21.0", "88.0", "2.55", "2.27", "0.26", "1.22", "2.0", "0.9", "2.78", "325.0"});
    parsedCsv.push_back({"11.76", "2.68", "2.92", "20.0", "103.0", "1.75", "2.03", "0.6", "1.05", "3.8", "1.23", "2.5", "607.0"});
    parsedCsv.push_back({"11.41", "0.74", "2.5", "21.0", "88.0", "2.48", "2.01", "0.42", "1.44", "3.08", "1.1", "2.31", "434.0"});
    parsedCsv.push_back({"12.08", "1.39", "2.5", "22.5", "84.0", "2.56", "2.29", "0.43", "1.04", "2.9", "0.93", "3.19", "385.0"});
    parsedCsv.push_back({"11.03", "1.51", "2.2", "21.5", "85.0", "2.46", "2.17", "0.52", "2.01", "1.9", "1.71", "2.87", "407.0"});
    parsedCsv.push_back({"11.82", "1.47", "1.99", "20.8", "86.0", "1.98", "1.6", "0.3", "1.53", "1.95", "0.95", "3.33", "495.0"});
    parsedCsv.push_back({"12.42", "1.61", "2.19", "22.5", "108.0", "2.0", "2.09", "0.34", "1.61", "2.06", "1.06", "2.96", "345.0"});
    parsedCsv.push_back({"12.77", "3.43", "1.98", "16.0", "80.0", "1.63", "1.25", "0.43", "0.83", "3.4", "0.7", "2.12", "372.0"});
    parsedCsv.push_back({"12.0", "3.43", "2.0", "19.0", "87.0", "2.0", "1.64", "0.37", "1.87", "1.28", "0.93", "3.05", "564.0"});
    parsedCsv.push_back({"11.45", "2.4", "2.42", "20.0", "96.0", "2.9", "2.79", "0.32", "1.83", "3.25", "0.8", "3.39", "625.0"});
    parsedCsv.push_back({"11.56", "2.05", "3.23", "28.5", "119.0", "3.18", "5.08", "0.47", "1.87", "6.0", "0.93", "3.69", "465.0"});
    parsedCsv.push_back({"12.42", "4.43", "2.73", "26.5", "102.0", "2.2", "2.13", "0.43", "1.71", "2.08", "0.92", "3.12", "365.0"});
    parsedCsv.push_back({"13.05", "5.8", "2.13", "21.5", "86.0", "2.62", "2.65", "0.3", "2.01", "2.6", "0.73", "3.1", "380.0"});
    parsedCsv.push_back({"11.87", "4.31", "2.39", "21.0", "82.0", "2.86", "3.03", "0.21", "2.91", "2.8", "0.75", "3.64", "380.0"});
    parsedCsv.push_back({"12.07", "2.16", "2.17", "21.0", "85.0", "2.6", "2.65", "0.37", "1.35", "2.76", "0.86", "3.28", "378.0"});
    parsedCsv.push_back({"12.43", "1.53", "2.29", "21.5", "86.0", "2.74", "3.15", "0.39", "1.77", "3.94", "0.69", "2.84", "352.0"});
    parsedCsv.push_back({"11.79", "2.13", "2.78", "28.5", "92.0", "2.13", "2.24", "0.58", "1.76", "3.0", "0.97", "2.44", "466.0"});
    parsedCsv.push_back({"12.37", "1.63", "2.3", "24.5", "88.0", "2.22", "2.45", "0.4", "1.9", "2.12", "0.89", "2.78", "342.0"});
    parsedCsv.push_back({"12.04", "4.3", "2.38", "22.0", "80.0", "2.1", "1.75", "0.42", "1.35", "2.6", "0.79", "2.57", "580.0"});
    parsedCsv.push_back({"12.86", "1.35", "2.32", "18.0", "122.0", "1.51", "1.25", "0.21", "0.94", "4.1", "0.76", "1.29", "630.0"});
    parsedCsv.push_back({"12.88", "2.99", "2.4", "20.0", "104.0", "1.3", "1.22", "0.24", "0.83", "5.4", "0.74", "1.42", "530.0"});
    parsedCsv.push_back({"12.81", "2.31", "2.4", "24.0", "98.0", "1.15", "1.09", "0.27", "0.83", "5.7", "0.66", "1.36", "560.0"});
    parsedCsv.push_back({"12.7", "3.55", "2.36", "21.5", "106.0", "1.7", "1.2", "0.17", "0.84", "5.0", "0.78", "1.29", "600.0"});
    parsedCsv.push_back({"12.51", "1.24", "2.25", "17.5", "85.0", "2.0", "0.58", "0.6", "1.25", "5.45", "0.75", "1.51", "650.0"});
    parsedCsv.push_back({"12.6", "2.46", "2.2", "18.5", "94.0", "1.62", "0.66", "0.63", "0.94", "7.1", "0.73", "1.58", "695.0"});
    parsedCsv.push_back({"12.25", "4.72", "2.54", "21.0", "89.0", "1.38", "0.47", "0.53", "0.8", "3.85", "0.75", "1.27", "720.0"});
    parsedCsv.push_back({"12.53", "5.51", "2.64", "25.0", "96.0", "1.79", "0.6", "0.63", "1.1", "5.0", "0.82", "1.69", "515.0"});
    parsedCsv.push_back({"13.49", "3.59", "2.19", "19.5", "88.0", "1.62", "0.48", "0.58", "0.88", "5.7", "0.81", "1.82", "580.0"});
    parsedCsv.push_back({"12.84", "2.96", "2.61", "24.0", "101.0", "2.32", "0.6", "0.53", "0.81", "4.92", "0.89", "2.15", "590.0"});
    parsedCsv.push_back({"12.93", "2.81", "2.7", "21.0", "96.0", "1.54", "0.5", "0.53", "0.75", "4.6", "0.77", "2.31", "600.0"});
    parsedCsv.push_back({"13.36", "2.56", "2.35", "20.0", "89.0", "1.4", "0.5", "0.37", "0.64", "5.6", "0.7", "2.47", "780.0"});
    parsedCsv.push_back({"13.52", "3.17", "2.72", "23.5", "97.0", "1.55", "0.52", "0.5", "0.55", "4.35", "0.89", "2.06", "520.0"});
    parsedCsv.push_back({"13.62", "4.95", "2.35", "20.0", "92.0", "2.0", "0.8", "0.47", "1.02", "4.4", "0.91", "2.05", "550.0"});
    parsedCsv.push_back({"12.25", "3.88", "2.2", "18.5", "112.0", "1.38", "0.78", "0.29", "1.14", "8.21", "0.65", "2.0", "855.0"});
    parsedCsv.push_back({"13.16", "3.57", "2.15", "21.0", "102.0", "1.5", "0.55", "0.43", "1.3", "4.0", "0.6", "1.68", "830.0"});
    parsedCsv.push_back({"13.88", "5.04", "2.23", "20.0", "80.0", "0.98", "0.34", "0.4", "0.68", "4.9", "0.58", "1.33", "415.0"});
    parsedCsv.push_back({"12.87", "4.61", "2.48", "21.5", "86.0", "1.7", "0.65", "0.47", "0.86", "7.65", "0.54", "1.86", "625.0"});
    parsedCsv.push_back({"13.32", "3.24", "2.38", "21.5", "92.0", "1.93", "0.76", "0.45", "1.25", "8.42", "0.55", "1.62", "650.0"});
    parsedCsv.push_back({"13.08", "3.9", "2.36", "21.5", "113.0", "1.41", "1.39", "0.34", "1.14", "9.4", "0.57", "1.33", "550.0"});
    parsedCsv.push_back({"13.5", "3.12", "2.62", "24.0", "123.0", "1.4", "1.57", "0.22", "1.25", "8.6", "0.59", "1.3", "500.0"});
    parsedCsv.push_back({"12.79", "2.67", "2.48", "22.0", "112.0", "1.48", "1.36", "0.24", "1.26", "10.8", "0.48", "1.47", "480.0"});
    parsedCsv.push_back({"13.11", "1.9", "2.75", "25.5", "116.0", "2.2", "1.28", "0.26", "1.56", "7.1", "0.61", "1.33", "425.0"});
    parsedCsv.push_back({"13.23", "3.3", "2.28", "18.5", "98.0", "1.8", "0.83", "0.61", "1.87", "10.52", "0.56", "1.51", "675.0"});
    parsedCsv.push_back({"12.58", "1.29", "2.1", "20.0", "103.0", "1.48", "0.58", "0.53", "1.4", "7.6", "0.58", "1.55", "640.0"});
    parsedCsv.push_back({"13.17", "5.19", "2.32", "22.0", "93.0", "1.74", "0.63", "0.61", "1.55", "7.9", "0.6", "1.48", "725.0"});
    parsedCsv.push_back({"13.84", "4.12", "2.38", "19.5", "89.0", "1.8", "0.83", "0.48", "1.56", "9.01", "0.57", "1.64", "480.0"});
    parsedCsv.push_back({"12.45", "3.03", "2.64", "27.0", "97.0", "1.9", "0.58", "0.63", "1.14", "7.5", "0.67", "1.73", "880.0"});
    parsedCsv.push_back({"14.34", "1.68", "2.7", "25.0", "98.0", "2.8", "1.31", "0.53", "2.7", "13.0", "0.57", "1.96", "660.0"});
    parsedCsv.push_back({"13.48", "1.67", "2.64", "22.5", "89.0", "2.6", "1.1", "0.52", "2.29", "11.75", "0.57", "1.78", "620.0"});
    parsedCsv.push_back({"12.36", "3.83", "2.38", "21.0", "88.0", "2.3", "0.92", "0.5", "1.04", "7.65", "0.56", "1.58", "520.0"});
    parsedCsv.push_back({"13.69", "3.26", "2.54", "20.0", "107.0", "1.83", "0.56", "0.5", "0.8", "5.88", "0.96", "1.82", "680.0"});
    parsedCsv.push_back({"12.85", "3.27", "2.58", "22.0", "106.0", "1.65", "0.6", "0.6", "0.96", "5.58", "0.87", "2.11", "570.0"});
    parsedCsv.push_back({"12.96", "3.45", "2.35", "18.5", "106.0", "1.39", "0.7", "0.4", "0.94", "5.28", "0.68", "1.75", "675.0"});
    parsedCsv.push_back({"13.78", "2.76", "2.3", "22.0", "90.0", "1.35", "0.68", "0.41", "1.03", "9.58", "0.7", "1.68", "615.0"});
    parsedCsv.push_back({"13.73", "4.36", "2.26", "22.5", "88.0", "1.28", "0.47", "0.52", "1.15", "6.62", "0.78", "1.75", "520.0"});
    parsedCsv.push_back({"13.45", "3.7", "2.6", "23.0", "111.0", "1.7", "0.92", "0.43", "1.46", "10.68", "0.85", "1.56", "695.0"});
    parsedCsv.push_back({"12.82", "3.37", "2.3", "19.5", "88.0", "1.48", "0.66", "0.4", "0.97", "10.26", "0.72", "1.75", "685.0"});
    parsedCsv.push_back({"13.58", "2.58", "2.69", "24.5", "105.0", "1.55", "0.84", "0.39", "1.54", "8.66", "0.74", "1.8", "750.0"});
    parsedCsv.push_back({"13.4", "4.6", "2.86", "25.0", "112.0", "1.98", "0.96", "0.27", "1.11", "8.5", "0.67", "1.92", "630.0"});
    parsedCsv.push_back({"12.2", "3.03", "2.32", "19.0", "96.0", "1.25", "0.49", "0.4", "0.73", "5.5", "0.66", "1.83", "510.0"});
    parsedCsv.push_back({"12.77", "2.39", "2.28", "19.5", "86.0", "1.39", "0.51", "0.48", "0.64", "9.899999", "0.57", "1.63", "470.0"});
    parsedCsv.push_back({"14.16", "2.51", "2.48", "20.0", "91.0", "1.68", "0.7", "0.44", "1.24", "9.7", "0.62", "1.71", "660.0"});
    parsedCsv.push_back({"13.71", "5.65", "2.45", "20.5", "95.0", "1.68", "0.61", "0.52", "1.06", "7.7", "0.64", "1.74", "740.0"});
    parsedCsv.push_back({"13.4", "3.91", "2.48", "23.0", "102.0", "1.8", "0.75", "0.43", "1.41", "7.3", "0.7", "1.56", "750.0"});
    parsedCsv.push_back({"13.27", "4.28", "2.26", "20.0", "120.0", "1.59", "0.69", "0.43", "1.35", "10.2", "0.59", "1.56", "835.0"});
    parsedCsv.push_back({"13.17", "2.59", "2.37", "20.0", "120.0", "1.65", "0.68", "0.53", "1.46", "9.3", "0.6", "1.62", "840.0"});
    parsedCsv.push_back({"14.13", "4.1", "2.74", "24.5", "96.0", "2.05", "0.76", "0.56", "1.35", "9.2", "0.61", "1.6", "560.0"});

    
    
    iTree1.push_back({1, 16, 1, 200, -2.8223255843807076});
    iTree1.push_back({2, 15, 0, 8, 4.63295735588763});
    iTree1.push_back({3, 14, 1, 7, -3.995549383803928});
    iTree1.push_back({4, 11, 0, 6, -0.9369161679179348});
    iTree1.push_back({5, 6, 0, 4, -4.254666994892343});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({7, 8, 0, 3, -1.6221915824824735});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({9, 10, 0, 2, -1.3915606911185667});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({12, 13, 0, 2, 2.1360056221045616});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({17, 46, 1, 192, 1.6761888421829818});
    iTree1.push_back({18, 19, 1, 166, -1.8013714297570889});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({20, 39, 1, 165, 0.8685011692804889});
    iTree1.push_back({21, 34, 0, 161, 5.513614747515222});
    iTree1.push_back({22, 27, 1, 158, 0.6317519233016338});
    iTree1.push_back({23, 24, 1, 153, -1.344372072291838});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({25, 26, 0, 152, -1.5352106490409518});
    iTree1.push_back({0, 0, -2, 4, -2.0});
    iTree1.push_back({0, 0, -2, 148, -2.0});
    iTree1.push_back({28, 31, 1, 5, 0.6752003915356731});
    iTree1.push_back({29, 30, 0, 2, -1.4995047435856046});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({32, 33, 0, 3, 1.1675254054025894});
    iTree1.push_back({0, 0, -2, 2, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({35, 36, 0, 3, 5.559385642591473});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({37, 38, 0, 2, 5.814985464165995});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({40, 45, 0, 4, 3.2260008306652646});
    iTree1.push_back({41, 44, 1, 3, 1.4508947241399788});
    iTree1.push_back({42, 43, 0, 2, 1.5396185877751214});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({47, 48, 0, 26, -5.822576267635948});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({49, 62, 1, 25, 3.3350949725731054});
    iTree1.push_back({50, 51, 1, 8, 1.9346978706557505});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({52, 55, 1, 7, 2.7644757316435644});
    iTree1.push_back({53, 54, 1, 2, 2.3625701621068567});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({56, 59, 0, 5, 0.10680251574333788});
    iTree1.push_back({57, 58, 1, 2, 3.249291280271211});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({60, 61, 1, 3, 3.0310107781917703});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 2, -2.0});
    iTree1.push_back({63, 74, 1, 17, 5.503924922085199});
    iTree1.push_back({64, 67, 1, 14, 3.6851051737172154});
    iTree1.push_back({65, 66, 1, 2, 3.614396932105393});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({68, 71, 0, 12, -3.232979121168662});
    iTree1.push_back({69, 70, 0, 3, -5.203523751369208});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 2, -2.0});
    iTree1.push_back({72, 73, 0, 9, 2.363311261023026});
    iTree1.push_back({0, 0, -2, 8, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({75, 76, 1, 3, 5.748664122204246});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({77, 78, 0, 2, -3.8183365131852764});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iTree1.push_back({0, 0, -2, 1, -2.0});
    iForest.push_back(iTree1);

    iTree2.push_back({1, 28, 0, 200, -3.8118427476327934});
    iTree2.push_back({2, 13, 1, 14, 1.3125172911241707});
    iTree2.push_back({3, 12, 0, 6, -4.751801672766842});
    iTree2.push_back({4, 5, 1, 5, -3.8376947502590295});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({6, 9, 1, 4, -0.053344762230246756});
    iTree2.push_back({7, 8, 0, 2, -5.0588153045424065});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({10, 11, 0, 2, -5.202601622033316});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({14, 17, 1, 8, 2.448741239945167});
    iTree2.push_back({15, 16, 0, 2, -4.906206846199614});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({18, 19, 1, 6, 3.840015015854034});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({20, 25, 1, 5, 5.4481792428773685});
    iTree2.push_back({21, 22, 1, 3, 3.870145789588346});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({23, 24, 1, 2, 4.722085389829717});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({26, 27, 0, 2, -5.5001184613684});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({29, 86, 1, 186, 4.975351742105552});
    iTree2.push_back({30, 37, 0, 181, -2.0211145573832754});
    iTree2.push_back({31, 36, 0, 4, -2.3103444366515973});
    iTree2.push_back({32, 33, 1, 3, -2.7845750566493996});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({34, 35, 1, 2, 1.971925046439897});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({38, 63, 0, 177, 2.704630674749497});
    iTree2.push_back({39, 54, 1, 165, 2.998894397975093});
    iTree2.push_back({40, 47, 1, 159, -1.4963692848855823});
    iTree2.push_back({41, 44, 0, 6, 1.1052566573851483});
    iTree2.push_back({42, 43, 1, 4, -4.779480251731535});
    iTree2.push_back({0, 0, -2, 2, -2.0});
    iTree2.push_back({0, 0, -2, 2, -2.0});
    iTree2.push_back({45, 46, 0, 2, 1.5813182291133474});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({48, 51, 1, 153, 0.25741302343708217});
    iTree2.push_back({49, 50, 1, 127, -0.15694314002482918});
    iTree2.push_back({0, 0, -2, 45, -2.0});
    iTree2.push_back({0, 0, -2, 82, -2.0});
    iTree2.push_back({52, 53, 0, 26, 1.2156243043384163});
    iTree2.push_back({0, 0, -2, 25, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({55, 60, 1, 6, 4.7991189207217815});
    iTree2.push_back({56, 59, 1, 4, 4.148012067533219});
    iTree2.push_back({57, 58, 0, 3, 1.4201771424364265});
    iTree2.push_back({0, 0, -2, 2, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({61, 62, 0, 2, 0.3955600451347454});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({64, 73, 0, 12, 4.147922499802581});
    iTree2.push_back({65, 68, 1, 5, 1.2908051649000902});
    iTree2.push_back({66, 67, 1, 2, 0.8357470803702439});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({69, 70, 1, 3, 3.3591159419517735});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({71, 72, 0, 2, 3.485574588557206});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({74, 79, 1, 7, -0.9539078043322045});
    iTree2.push_back({75, 76, 0, 3, 5.438281390537063});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({77, 78, 0, 2, 5.55842415534177});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({80, 83, 1, 4, 0.30534527377167753});
    iTree2.push_back({81, 82, 1, 2, -0.36088620104485203});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({84, 85, 0, 2, 5.59442553072203});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({87, 92, 0, 5, -0.3064152778335938});
    iTree2.push_back({88, 91, 0, 3, -2.0611428301160735});
    iTree2.push_back({89, 90, 0, 2, -3.129450123083427});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({93, 94, 0, 2, 2.968515472265081});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iTree2.push_back({0, 0, -2, 1, -2.0});
    iForest.push_back(iTree2);

    iTree3.push_back({1, 28, 0, 200, -3.331537138023105});
    iTree3.push_back({2, 25, 0, 14, -4.633613351841512});
    iTree3.push_back({3, 4, 1, 12, -2.4009708606449385});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({5, 10, 0, 11, -5.48197921705466});
    iTree3.push_back({6, 9, 0, 3, -5.821966786954015});
    iTree3.push_back({7, 8, 1, 2, 4.796305476295737});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({11, 16, 0, 8, -5.044790857136775});
    iTree3.push_back({12, 13, 0, 3, -5.216596402704323});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({14, 15, 1, 2, 1.4562326535022105});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({17, 22, 1, 5, 4.579166981000621});
    iTree3.push_back({18, 21, 1, 3, 1.6277182176963778});
    iTree3.push_back({19, 20, 0, 2, -4.890093367013});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({23, 24, 1, 2, 5.037641309840728});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({26, 27, 0, 2, -4.408972822260824});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({29, 50, 1, 186, -0.9659222518621204});
    iTree3.push_back({30, 45, 0, 11, 3.9239817160447776});
    iTree3.push_back({31, 42, 0, 8, 0.5981865648181777});
    iTree3.push_back({32, 39, 1, 6, -2.7849920001532413});
    iTree3.push_back({33, 36, 1, 4, -4.757106035276164});
    iTree3.push_back({34, 35, 1, 2, -5.8670448974163465});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({37, 38, 0, 2, -2.3063244019096993});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({40, 41, 0, 2, -1.6993107967442795});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({43, 44, 0, 2, 2.233261838004457});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({46, 49, 1, 3, -1.418536899911703});
    iTree3.push_back({47, 48, 0, 2, 5.343759597264624});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({51, 68, 1, 175, -0.4814228527248853});
    iTree3.push_back({52, 67, 0, 9, 3.386581094185117});
    iTree3.push_back({53, 64, 1, 8, -0.5421164076144059});
    iTree3.push_back({54, 59, 0, 6, 0.41389562881169495});
    iTree3.push_back({55, 58, 0, 3, 0.06639164077028745});
    iTree3.push_back({56, 57, 0, 2, 0.04282544937973504});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({60, 63, 0, 3, 1.3715877508785117});
    iTree3.push_back({61, 62, 1, 2, -0.570941641885263});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({65, 66, 0, 2, 0.17276257605175505});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({69, 92, 1, 166, 4.392888877855181});
    iTree3.push_back({70, 79, 0, 156, 2.6120996113516206});
    iTree3.push_back({71, 78, 1, 148, 3.912789045708596});
    iTree3.push_back({72, 75, 0, 147, 0.8435795613654586});
    iTree3.push_back({73, 74, 0, 145, -1.4139920419149914});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 144, -2.0});
    iTree3.push_back({76, 77, 1, 2, 2.758594693869167});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({80, 85, 0, 8, 3.0770584739110802});
    iTree3.push_back({81, 82, 1, 3, 1.043020523495393});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({83, 84, 0, 2, 3.0087161505528788});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({86, 89, 0, 5, 5.588383567681543});
    iTree3.push_back({87, 88, 0, 3, 4.139208309025473});
    iTree3.push_back({0, 0, -2, 2, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({90, 91, 1, 2, 2.1056215725632947});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({93, 106, 0, 10, 0.9756618419130278});
    iTree3.push_back({94, 101, 0, 8, -1.0669090730226611});
    iTree3.push_back({95, 98, 1, 5, 4.899334431306737});
    iTree3.push_back({96, 97, 0, 2, -2.252721889526729});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({99, 100, 1, 3, 5.4709699675913965});
    iTree3.push_back({0, 0, -2, 2, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({102, 105, 0, 3, -0.1797473480146885});
    iTree3.push_back({103, 104, 1, 2, 4.690141736045483});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({107, 108, 1, 2, 5.177154231751913});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iTree3.push_back({0, 0, -2, 1, -2.0});
    iForest.push_back(iTree3);

    iTree4.push_back({1, 88, 1, 200, 5.88109663001986});
    iTree4.push_back({2, 41, 0, 199, -1.051287589967714});
    iTree4.push_back({3, 12, 1, 26, -3.2470671671056355});
    iTree4.push_back({4, 5, 0, 5, -5.175368436641799});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({6, 11, 1, 4, -3.8898818388154988});
    iTree4.push_back({7, 8, 0, 3, -1.57627583842118});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({9, 10, 0, 2, -1.3808095052483866});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({13, 30, 0, 21, -2.596741889261866});
    iTree4.push_back({14, 27, 0, 14, -4.409004889983315});
    iTree4.push_back({15, 20, 0, 12, -5.255507078368641});
    iTree4.push_back({16, 19, 0, 4, -5.4367955278148425});
    iTree4.push_back({17, 18, 1, 3, 3.5057042081186665});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 2, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({21, 24, 1, 8, 2.217923216422267});
    iTree4.push_back({22, 23, 0, 4, -4.862218032841527});
    iTree4.push_back({0, 0, -2, 2, -2.0});
    iTree4.push_back({0, 0, -2, 2, -2.0});
    iTree4.push_back({25, 26, 1, 4, 4.557255396650883});
    iTree4.push_back({0, 0, -2, 2, -2.0});
    iTree4.push_back({0, 0, -2, 2, -2.0});
    iTree4.push_back({28, 29, 1, 2, 4.622723951724617});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({31, 34, 1, 7, 2.9486383557060476});
    iTree4.push_back({32, 33, 1, 2, -1.756524991734208});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({35, 36, 1, 5, 3.7735800353742093});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({37, 38, 0, 4, -2.2030755415829115});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({39, 40, 0, 3, -2.002754233792114});
    iTree4.push_back({0, 0, -2, 2, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({42, 47, 1, 173, -3.3034714063935056});
    iTree4.push_back({43, 46, 0, 3, 3.0267069581246253});
    iTree4.push_back({44, 45, 1, 2, -4.808394659741861});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({48, 67, 0, 170, 2.287378181584631});
    iTree4.push_back({49, 56, 1, 158, 1.255096087303559});
    iTree4.push_back({50, 55, 1, 151, 0.8938604811819855});
    iTree4.push_back({51, 54, 0, 150, 0.8492236576371937});
    iTree4.push_back({52, 53, 0, 149, 0.17029055227387335});
    iTree4.push_back({0, 0, -2, 113, -2.0});
    iTree4.push_back({0, 0, -2, 36, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({57, 62, 0, 7, 0.43794473022875513});
    iTree4.push_back({58, 61, 0, 4, -0.25259347535171883});
    iTree4.push_back({59, 60, 1, 3, 3.250793070262892});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 2, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({63, 66, 1, 3, 4.076571367914456});
    iTree4.push_back({64, 65, 0, 2, 1.594834972050833});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({68, 79, 1, 12, 2.8499244282042353});
    iTree4.push_back({69, 74, 1, 7, 0.6153138314835593});
    iTree4.push_back({70, 71, 0, 4, 4.985205417330515});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({72, 73, 1, 3, -1.1496469989702076});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 2, -2.0});
    iTree4.push_back({75, 76, 1, 3, 0.8331215078626347});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({77, 78, 0, 2, 4.487679147123073});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({80, 87, 0, 5, 5.331026203922253});
    iTree4.push_back({81, 84, 0, 4, 3.2491830302413867});
    iTree4.push_back({82, 83, 0, 2, 3.0090473181045954});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({85, 86, 0, 2, 3.582882345667128});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iTree4.push_back({0, 0, -2, 1, -2.0});
    iForest.push_back(iTree4);

    iTree5.push_back({1, 74, 0, 200, -0.10890806862215996});
    iTree5.push_back({2, 47, 1, 85, 0.7223064236714434});
    iTree5.push_back({3, 24, 0, 68, -0.9854850532994721});
    iTree5.push_back({4, 13, 0, 12, -4.261996478972066});
    iTree5.push_back({5, 12, 0, 6, -4.802642181908262});
    iTree5.push_back({6, 7, 0, 5, -5.3266441626346515});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({8, 9, 1, 4, -2.789926476177434});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({10, 11, 1, 3, 0.27640342463862533});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 2, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({14, 21, 1, 6, -2.704764423457595});
    iTree5.push_back({15, 16, 1, 4, -5.402030210599012});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({17, 18, 0, 3, -2.4294908159193325});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({19, 20, 1, 2, -4.874376593260006});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({22, 23, 1, 2, -1.9362434053913857});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({25, 26, 1, 56, -0.44955053369290016});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({27, 32, 0, 55, -0.5968168296945505});
    iTree5.push_back({28, 31, 1, 3, 0.10440266191918507});
    iTree5.push_back({29, 30, 0, 2, -0.6264667724712597});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({33, 40, 0, 52, -0.4562296235049039});
    iTree5.push_back({34, 37, 0, 4, -0.4990823563733488});
    iTree5.push_back({35, 36, 1, 2, -0.0294293967664484});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({38, 39, 0, 2, -0.4681336022643158});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({41, 44, 0, 48, -0.24702977396283743});
    iTree5.push_back({42, 43, 0, 23, -0.36732638497133985});
    iTree5.push_back({0, 0, -2, 7, -2.0});
    iTree5.push_back({0, 0, -2, 16, -2.0});
    iTree5.push_back({45, 46, 0, 25, -0.12577634691623635});
    iTree5.push_back({0, 0, -2, 24, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({48, 51, 1, 17, 2.077442492373631});
    iTree5.push_back({49, 50, 1, 2, 1.6767770571123144});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({52, 55, 0, 15, -5.130024371137071});
    iTree5.push_back({53, 54, 0, 2, -5.660090449482265});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({56, 65, 0, 13, -2.9813278961082954});
    iTree5.push_back({57, 64, 0, 6, -3.940409609909128});
    iTree5.push_back({58, 61, 1, 5, 3.37470126807981});
    iTree5.push_back({59, 60, 1, 2, 2.558415519702108});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({62, 63, 0, 3, -4.859078175188484});
    iTree5.push_back({0, 0, -2, 2, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({66, 71, 1, 7, 4.9097354874615196});
    iTree5.push_back({67, 68, 1, 5, 4.169956520724713});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({69, 70, 0, 4, -2.080101986361347});
    iTree5.push_back({0, 0, -2, 2, -2.0});
    iTree5.push_back({0, 0, -2, 2, -2.0});
    iTree5.push_back({72, 73, 0, 2, -2.147284729007325});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({75, 118, 1, 115, 2.64979787627611});
    iTree5.push_back({76, 83, 1, 106, -1.3758821978650007});
    iTree5.push_back({77, 80, 1, 4, -4.854898934557211});
    iTree5.push_back({78, 79, 0, 2, 4.821541654509474});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({81, 82, 1, 2, -2.301768726580294});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({84, 105, 1, 102, 0.6601915653440766});
    iTree5.push_back({85, 98, 1, 95, -0.40600263677596304});
    iTree5.push_back({86, 93, 0, 14, 0.6113630033990424});
    iTree5.push_back({87, 90, 1, 9, -0.45505338584445676});
    iTree5.push_back({88, 89, 1, 5, -0.5872802434365154});
    iTree5.push_back({0, 0, -2, 2, -2.0});
    iTree5.push_back({0, 0, -2, 3, -2.0});
    iTree5.push_back({91, 92, 0, 4, 0.14510965291188627});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 3, -2.0});
    iTree5.push_back({94, 97, 0, 5, 4.855760329413889});
    iTree5.push_back({95, 96, 1, 4, -0.8256399483037099});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 3, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({99, 104, 1, 81, 0.6488825775675933});
    iTree5.push_back({100, 103, 0, 80, 1.6737831416653706});
    iTree5.push_back({101, 102, 1, 79, -0.0089214804558716});
    iTree5.push_back({0, 0, -2, 34, -2.0});
    iTree5.push_back({0, 0, -2, 45, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({106, 117, 0, 7, 4.099946247313356});
    iTree5.push_back({107, 112, 0, 6, 1.0086974850842443});
    iTree5.push_back({108, 111, 0, 3, 0.14915262062746762});
    iTree5.push_back({109, 110, 1, 2, 0.7497219415771309});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({113, 116, 1, 3, 2.193201234040224});
    iTree5.push_back({114, 115, 0, 2, 2.955773576032529});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({119, 126, 0, 9, 2.095141063223648});
    iTree5.push_back({120, 125, 1, 4, 5.605360776988636});
    iTree5.push_back({121, 124, 0, 3, 1.2281650327952311});
    iTree5.push_back({122, 123, 1, 2, 4.502899364352415});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({127, 134, 0, 5, 4.877674366667765});
    iTree5.push_back({128, 131, 0, 4, 3.2608450419138837});
    iTree5.push_back({129, 130, 0, 2, 3.0089853475518216});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({132, 133, 0, 2, 3.635241593828554});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iTree5.push_back({0, 0, -2, 1, -2.0});
    iForest.push_back(iTree5);

}

float c(float size)
{
    if (size > 2)
    {
        float temp = (2 * (log(size -1) + 0.5772156649)) - (2*(size-1)/size);
        return temp;
    }
    if (size == 2)
    {
        return 1;
    }
    return 0;
}

std::vector<float> path_length(std::vector<vector<Tree>> forest, std::vector<std::vector<std::string>> parsedCsv)
{
    std::vector<float> edges;
    for (size_t i = 0; i < parsedCsv.size(); i++)
    {
        std::vector<float> path;

        for (size_t j = 0; j < iForest.size(); j++)
        {
            std::vector<Tree> tree = iForest[j];
            int current_node_id = 0;
            int length = 0;
            
            while (length == 0 || tree[current_node_id].child_id_left != 0)
            {
                float splitValue_attribute = std::stof(parsedCsv[i][tree[current_node_id].feature]);
                float splitValue_node = tree[current_node_id].threshold;
                if (splitValue_attribute < splitValue_node)
                {
                    current_node_id = tree[current_node_id].child_id_left;
                    length += 1;
                }
                else
                {
                    current_node_id = tree[current_node_id].child_id_right;
                    length += 1;
                }
            }
            float leaf_size = tree[current_node_id].n_samples;
            
            float path_length = length + c(leaf_size);
            path.push_back(path_length);
        }

        float average_path = 0;
        for(int k = 0; k < iForest.size(); k++)
        {
            average_path += path[k];
        }
        average_path = average_path/path.size();
        edges.push_back(average_path);
        path.clear();
    }
    return edges;
}

std::vector<float> decision_function(std::vector<vector<Tree>> forest, std::vector<std::vector<std::string>> parsedCsv)
{
    std::vector<float> scores;
    float score = 0;
    std::vector<float> average_length = path_length(forest, parsedCsv);
    for (size_t i = 0; i < average_length.size(); i ++)
    {
        float scorep =  0.5 - pow(2, (-1 * average_length[i])/c(parsedCsv.size()));
        scores.push_back(scorep);
    }
    return scores;
}

void loop() 
{
    std::vector<float> scores_pred = decision_function(iForest, parsedCsv);
    for (size_t i = 0; i < scores_pred.size(); i++)
    {
        Serial.println(sizeof(iForest))
        //Serial.println(scores_pred[i], 8);
    }  
}
